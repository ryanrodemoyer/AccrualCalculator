@using Microsoft.AspNetCore.Hosting
@inject IHostingEnvironment Env

@await Html.PartialAsync("_VueScriptsPartial")

<div id="app"></div>

<script type="text/x-template" id="default-component">
    <config-bar-component
        :initialConfig="initialConfig" :environment="environment"
        v-on:calculate="calculateReady" />
</script>

<script type="text/javascript">
    Vue.use(VeeValidate);

    var App = Vue.component('default-component',
        {
            template: '#default-component',
            data: function() {
                return {
                    initialConfig: {},
                    isReady: false,
                    actualConfig: {},
                    environment: { name: Environment }
                }
            },
            methods: {
                calculateReady: function(data) {
                    this.isReady = true;
                    this.actualConfig = data;
                }
            }
        });
</script>

<script type="text/x-template" id="config-bar-component">
    @await Html.PartialAsync("Vue\\_ConfigBarComponent")
</script>

<script type="text/javascript">
    var ConfigBar = Vue.component('config-bar-component',
        {
            template: '#config-bar-component',
            props: ['initialConfig', 'environment'],
            data: function() {
                return {
                    config: {
                        name: this.initialConfig.name,
                        startingHours: this.initialConfig.initialStartingHours,
                        accrualRate: this.initialConfig.initialAccrualRate,
                        maxHours: this.initialConfig.initialMaxHours,
                        accrualFrequency: this.initialConfig.initialAccrualFrequency,
                        dayOfPayA: this.initialConfig.initialDayOfPayA,
                        dayOfPayB: this.initialConfig.initialDayOfPayB,
                        startingDate: this.initialConfig.initialStartingDate,
                        ending: this.initialConfig.initialEnding
                    }
                }
            },
            methods: {
                loadDefaults: function(which) {
                    if (which === 'semi-monthly') {
                        this.config = {
                            name: 'My First Accrual',
                            startingHours: 22,
                            accrualRate: 11,
                            minHours: 40,
                            maxHours: 255,
                            accrualFrequency: 'SEMIMONTHLY',
                            dayOfPayA: 7,
                            dayOfPayB: 21,
                            startingDate: '2018-10-07',
                            ending: 'PLUSONE'
                        }
                    } else if (which === 'biweekly') {
                        this.config = {
                            name: 'My First Accrual',
                            startingHours: 22,
                            accrualRate: 11,
                            minHours: 40,
                            maxHours: 255,
                            accrualFrequency: 'BIWEEKLY',
                            startingDate: '2018-10-07',
                            ending: 'PLUSONE'
                        }
                    } else {
                        this.config = {};
                    }
                },
                validateBeforeSubmit: function(event) {
                },
                click: function(event) {
                    var payload = {
                        query:
                            "mutation($accrual:AccrualInputType!) { addAccrual(accrual: $accrual){ accrualId }}",
                        variables: {
                            "accrual": this.$data.config
                        }
                    };

                    axios.post('/graphql', payload)
                        .then(function(res) {
                            console.log(res);
                            if (res.data.errors) {
                                alert('Accrual not created. Check the console for information.');
                                console.log(res);
                            } else {
                                window.location.href = '/dashboard/view/' + res.data.data.addAccrual.accrualId;
                            }
                        }).catch(function(err) {
                            console.log('protocol error');
                            console.log(err);
                            alert('protocol error');
                        });
                }
            }
        });

    var Environment = "@Env.EnvironmentName";

    var app = new Vue({
        el: '#app',
        components: {
            App
        },
        render: function(createElement) {
            return createElement(App);
        }
    });
</script>