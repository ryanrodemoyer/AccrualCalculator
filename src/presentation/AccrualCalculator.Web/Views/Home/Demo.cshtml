@model Guid

<div id="app"></div>

@await Html.PartialAsync("_VueScriptsPartial")

<script type="text/javascript">
    var accrualFields = 'accrualId accrualRate name startingDate startingHours lastModified hourlyRate isHeart isArchived minHours maxHours accrualFrequency ending dayOfPayA dayOfPayB';
    
    var App = Vue.component('default-component',
        {
            template: '#default-component',
//            data: function() {
//                return {
//                    accrual: {}
//                };
//            },
            created: function() {
                this.getAccrual(this, function() {
                    alert('Error retrieving the accrual. Try again.');
                });
            },
            provide: function() {
              return {
                  getAccrual: this.getAccrual,
                  updateAccrual: this.updateAccrual,
                  deleteAccrual: this.deleteAccrual,
                  addAccrualAction: this.addAccrualAction,
                  deleteAccrualAction: this.deleteAccrualAction,
                  copyAccrual: this.copyAccrual
              };
            },
            computed: {
              accrual: function() {
                  return this.$store.state.accrual;
              }  
            },
            methods: {
                getAccrual: function(instance, errorCallback) {
                    return this.$store.state.accrual;
                },
                copyAccrual: function() {
                    var a = Object.assign({}, this.accrual);
                    delete a.actions;
                    delete a.rows;
                    delete a.lastModified;
                    delete a.accrualId;

                    return a;
                },
                updateAccrual: function(mutated, successCallback, errorCallback) {
                    var self = this;
                    this.$store.commit('updateAccrual', mutated);
                    if (successCallback) {
                        successCallback();
                    }
                },
                deleteAccrual: function(successCallback, errorCallback) {
                    var self = this;
                },
                addAccrualAction: function(adjustment, successCallback, errorCallback) {
                    var self = this;
                    this.$store.commit('addAccrualAction', adjustment);
                    if (successCallback) {
                        successCallback();
                    }
                },
                deleteAccrualAction: function(accrualActionId, errorCallback) {
                    var self = this;
                    this.$store.commit('deleteAccrualAction', accrualActionId);
                }
            }
        });
</script>

<script type="text/x-template" id="default-component">
    <div class="row">
        <div class="col-md-8">
            <div class="row">
                <h1>{{ accrual.name }}</h1>
                <accrual-table-component v-bind:accrual="accrual"></accrual-table-component>
            </div>
         </div>
         
         <div class="col-md-4">
            <div class="row">
                <actions-component :accrual="accrual"></actions-component>
            </div>
            <div class="row">
                <cool-stats-component :accrual="accrual"></cool-stats-component>
            </div>
            <div class="row">
                <add-action-component :accrual="accrual"></add-action-component>
            </div>
            <div class="row">
                <action-history-component :accrual="accrual"></action-history-component>
            </div>
         </div>
    </div>
</script>

<script type="text/javascript">
    var AccrualTable = Vue.component('accrual-table-component', {
        template: '#accrual-table-component',
        props: ['accrual'],
        data: function() {
            return { };
        },
        methods: { }
    });
</script>
<script type="text/x-template" id="accrual-table-component">
     <table class="table">
         <thead>
         <tr>
             <th>Date Accrued</th>
             <th>&nbsp;</t>
             <th class="text-center">Hours Accrued</th>
             <th class="text-center">Hours Adjusted</th>
             <th class="text-center">Total Accrued</th>
         </tr>
         </thead>
         <tbody>
            <template v-for="row in accrual.rows">
                <accrual-row-component v-bind:row="row" v-bind:accrualRate="accrual.accrualRate"></accrual-row-component>

                <template v-if="row.actions !== undefined && row.actions.length > 0">
                    <td>&nbsp;</td>
                    <td colspan="3">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Date</th>
                                    <th class="text-center">Adjustment</th>
                                    <th>Note</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr v-for="action in row.actions">
                                    <td>{{ action.actionDate }}</td>
                                    <td align="center">{{ action.amount }}</td>
                                    <td>{{ action.note }}</td>
                                </tr>
                            </tbody>
                        </table>
                    </td>
                </template>
            </template>
         </tbody>
     </table>
</script>

<script type="text/javascript">
    var Actions = Vue.component('accrual-row-component', {
        template: '#accrual-row-component',
        props: ['row', 'accrualRate'],
        methods: { }
    });
</script>
<script type="text/x-template" id="accrual-row-component">
    <tr>
         <td v-if="row.rowId === 0">Starting Row</td>
         <td v-if="row.rowId === 0">&nbsp;</td>
                  
         @* when using a leading-zero day-of-month format, 
         javascript subtracts a day from the actual value 
         ex: "2018-10-07" actually represents October 6th.
         i have no explanation for this. *@
         <td v-if="row.rowId > 0">{{row.accrualDate}}</td>
         
         <td v-if="row.actions.length > 0"><span @@click=""><i class="fas fa-chevron-down"></i></span></td>
         <td v-else></td>

         <td v-if="row.rowId === 0">&nbsp;</td>
         <td v-else align="center">{{accrualRate}}</td>
         
         <td v-if="row.rowId > 0" align="center">{{row.hoursUsed}}</td>

         <td align="center">{{row.currentAccrual}}</td>
     </tr>
</script>

<script type="text/javascript">
    var Actions = Vue.component('actions-component', {
        template: '#actions-component',
        props: ['accrual'],
        inject: ['updateAccrual', 'deleteAccrual', 'copyAccrual'],
        data: function() {
            return {
                localAccrual: {}
            };
        },
//        watch: {
//            accrual: function(current, previous) {
//                if (current && current.name) {
//                    this.localAccrual = this.copyAccrual();
//                }
//            }
//        },
        created: function() {
            this.localAccrual = this.copyAccrual();
        },
        methods: {
            updateAccrualClick: function(which) {
                var update = false;
                if (which === 'heart') {
                    update = true;
                    this.localAccrual.isHeart = !this.localAccrual.isHeart;
                } else if (which === 'archive') {
                    update = true;
                    this.localAccrual.isArchived = !this.localAccrual.isArchived;
                }
                    
                if (update) {
                    this.updateAccrual(this.localAccrual);
                }
            },
            deleteAccrualClick: function() {
                var answer = confirm('THIS ACTION IS PERMANENT!\nYOUR DATA WILL BE GONE FOREVER.\nClick OK to delete the accrual forever.\nClick Cancel to you know ... not do anything.');
                if (answer) {
                    this.deleteAccrual(function() {
                        alert('The accrual has been permanently removed from our system.');
                    }, function() {
                        alert('Error deleting the accrual. Check the console for additional information.');
                    });
                }
            }
        }
    });
</script>
<script type="text/x-template" id="actions-component">
    <div>
        <h1>Actions</h1>
        <span><i @@click="updateAccrualClick('heart')" v-bind:class="{redcolor: this.accrual.isHeart}" class="fas fa-heart" style="font-size: 32px;"></i></span>
        <span><i @@click="updateAccrualClick('archive')" v-bind:class="{bluecolor: this.accrual.isArchived}"  class="fas fa-archive" style="font-size: 32px;"></i></span>
        <span><i @@click="deleteAccrualClick" class="fas fa-trash" style="font-size: 32px;"></i></span>
    </div>
</script>

<script type="text/javascript">
    var Actions = Vue.component('cool-stats-component', {
        template: '#cool-stats-component',
        props: ['accrual'],
        inject: ['updateAccrual', 'copyAccrual'],
        data: 
            function() {
                return {
                    ui: {
                        isView: true,
                        ready: false
                    },
                    edit: {}
                };
            },
        methods: {
            doneClick: function() {
                var self = this;
                this.updateAccrual(this.edit, function() {
                    self.edit = undefined;
                    self.ui.isView = true;
                });
            },
            editClick: function() {
                this.edit = this.copyAccrual();
                this.ui.isView = false;
            },
            discardClick: function() {
                this.edit = undefined;
                this.ui.isView = true;
            }
        },
        computed: {
            isView: function() {
                return this.ui.isView;
            }
        },
        created: function() {
            // pause while we wait for the accrual prop to get populated
            // this approach with setTimeout is a previous approach i wanted to keep around for future reference
            // but for now i get the same effect using 'watch'
//            this.waitForAccrual();
        }
    });
</script>
<script type="text/x-template" id="cool-stats-component">
<div class="container-fluid">
    <div class="row">
        <h1>Accrual Info</h1>
        <p>
            <span v-if="isView">
                <a @@click.prevent="editClick">edit...</a>
            </span>
            <span v-else>
                <a @@click.prevent="doneClick">done...</a>
                <a @@click.prevent="discardClick" class="pull-right">discard...</a>
            </span>
        </p>
        <div class="form-group">
            <label class="control-label col-md-4">Name</label>
            <p v-if="isView" class="form-control-static col-md-8">{{ accrual.name }}</p>
            <p v-else class="col-md-6"><input type="text" class="form-control col-md-8" name="accrual-name" v-model="edit.name" maxlength="100" /></p>
        </div>
        <div class="form-group">
            <label class="control-label col-md-4">Accrual Rate</label>
            <p v-if="isView" class="form-control-static col-md-8">{{ accrual.accrualRate }}</p>
            <p v-else class="col-md-6"><input type="number" class="form-control col-md-8" name="accrual-rate" v-model="edit.accrualRate" /></p>
        </div>
        <div class="form-group">
            <label class="control-label col-md-4">Hourly Rate</label>
            <p v-if="isView" class="form-control-static col-md-8">{{ accrual.hourlyRate ? "$" + accrual.hourlyRate.toFixed(2) : "$15.00" }}</p>
            <p v-else class="col-md-6"><input type="number" class="form-control col-md-8" name="hourly-rate" v-model="edit.hourlyRate" /></p>
        </div>
        <div class="form-group">
            <label class="control-label col-md-4">Min Hours</label>
            <p v-if="isView" class="form-control-static col-md-8">{{ accrual.minHours }}</p>
            <p v-else class="col-md-6"><input type="number" class="form-control col-md-8" name="min-hours" v-model="edit.minHours" /></p>
        </div>
        <div class="form-group">
            <label class="control-label col-md-4">Max Hours</label>
            <p v-if="isView" class="form-control-static col-md-8">{{ accrual.maxHours }}</p>
            <p v-else class="col-md-6"><input type="number" class="form-control col-md-8" name="min-hours" v-model="edit.maxHours" /></p>
        </div>
        <div class="form-group">
            <label class="control-label col-md-4">Starting Date</label>
            <p v-if="isView" class="form-control-static col-md-8">{{ accrual.startingDate }}</p>
            <p v-else class="col-md-6"><input type="date" class="form-control col-md-8" name="starting-date" v-model="edit.startingDate" /></p>
        </div>
        <div class="form-group">
            <label class="control-label col-md-4">Last Modified</label>
            <p class="form-control-static col-md-8">{{ accrual.lastModified }}</p>
        </div>
    </div>

    <div class="row">
        <pre v-if="!isView">{{this.$data}}</pre>
    </div>    
</div>
</script>

<script type="text/javascript">
    var Actions = Vue.component('action-history-component', {
        template: '#action-history-component',
        props: ['accrual'],
        methods: { }
    });
</script>
<script type="text/x-template" id="action-history-component">
    <div>
        <h1>History</h1>
        
        <template v-if="accrual.actions">
            <action-history-detail-component 
                v-for="action in accrual.actions.slice().reverse()" 
                v-bind:action="action"
                :key="action.accrualActionId">
            </action-history-detail-component>
        </template>
    </div>
</script>

<script type="text/javascript">
    var Actions = Vue.component('action-history-detail-component', {
        template: '#action-history-detail-component',
        props: ['action'],
        inject: ['deleteAccrualAction'],
        methods: {
            deleteAccrualActionClick: function() {                
                this.deleteAccrualAction(this.action.accrualActionId);
            }
        }
    });
</script>
<script type="text/x-template" id="action-history-detail-component">
    <div>
        <p>
            <span v-if="action.accrualAction !== 'CREATED'"><a @@click.prevent="deleteAccrualActionClick"><i class="fas fa-times-circle" style="color: red;"></i></a></span>
            <strong>Accrual Action: {{ action.accrualAction }}</strong>
        </p>
        <p>Action Date: {{ action.actionDate }}</p>
        <p>Action Id: {{ action.accrualActionId }}</p>
        <p v-if="action.amount !== null">Amount: {{ action.amount }}</p>
        <p>Note: {{ action.note }}</p>
        <p><small>[date created]: {{ action.dateCreated }}</small></p>
    </div>
</script>

<script type="text/javascript">
    var AddAction = Vue.component('add-action-component',
        {
            template: '#add-action-component',
            props: ['accrual'],
            inject: ['addAccrualAction'],
            data: function() {
                return {
                    ui: {
                        show: false
                    }, 
                    adjustment: { }
                };
            },
            computed: {
                isDisabled: function() {
                    // the method returns true if the button should be disabled
                    // return false if all validations are successful
                        
                    if (this.adjustment.accrualAction !== 'ADJUSTMENT') {
                        return true;
                    }
    
                    var amount = parseInt(this.adjustment.amount);
                    if (!amount || amount < -40 || amount > 40) {
                        return true;
                    }
                        
                    var timestamp = Date.parse(this.adjustment.actionDate);
                    if (isNaN(timestamp) === true) {
                        return true;
                    } else {
                        if (new Date(this.adjustment.actionDate) < new Date(this.accrual.startingDate)) {
                            return true;
                        }
                    }
                        
                    if (this.adjustment.note && this.adjustment.note.length > 100) {
                        return true;
                    }
                       
                    return false;
                }
            },
            methods: {
                showAdjustmentPopupClick: function() {
                    var timestamp = new Date();
                    var initialActionDate = new Date(timestamp.getFullYear(), timestamp.getMonth(), timestamp.getDate());           
                    var offset = initialActionDate.getTimezoneOffset(); 
                    var yourDate = new Date(initialActionDate.getTime() + (offset*60*1000));
                    var date = yourDate.toISOString().split('T')[0];
                    
                    this.adjustment.accrualAction = 'ADJUSTMENT';
                    this.adjustment.actionDate = date;
                    this.ui.show = !this.ui.show;
                },
                addAccrualActionClick: function() {
                    var self = this;
                    this.addAccrualAction(this.adjustment, function() {
                        self.adjustment = {};
                        self.ui.show = false;
                    }); 
                }
            }
        });
</script>
<script type="text/x-template" id="add-action-component">
    <div id="add-action">
        <h1>Mods</h1>
        <div style="width: 28em; height: 100%; overflow:auto; background-color: rgba(0,0,0,.5); padding: 10px; border-radius: 5px;"
            v-if="ui.show">
            <form @@click.prevent>                
                <div class="input-group input-group-md col-md-12">
                    <label for="action-date" class="label label-info">Action Date</label>
                    <input type="date" class="form-control input-md" placeholder="(mm/dd/yyyy)" 
                        id="action-date" name="action-date"
                        v-model="adjustment.actionDate"
                        />
                </div>
                
                <div class="input-group input-group-md col-md-12">
                    <label for="amount" class="label label-info">Amount</label>
                    <select class="form-control selectpicker input-md" data-width="100%" 
                        id="amount" name="amount"
                        v-model="adjustment.amount"
                        >
                        <option disabled value="">Please select one</option>
                        <option value="8">8</option>
                        <option value="-4">-4</option>
                        <option value="-8">-8</option>
                        <option value="-16">-16</option>
                        <option value="-24">-24</option>
                        <option value="-32">-32</option>
                        <option value="-40">-40</option>
                    </select>

                </div>
                
                <div class="input-group input-group-md col-md-12">
                    <label for="note" class="label label-info">Note</label>
                    <input type="text" class="form-control input-md" placeholder="Add your details" 
                        id="note" name="note"
                        v-model="adjustment.note"
                         />
                </div>
                
                <div class="input-group input-group-md col-md-12">
                    <button class="btn btn-success btn-block" name="add" style="margin-top: 5px;"
                        @@click="addAccrualActionClick" :disabled="isDisabled">Create!</button>
                     <button class="btn btn-warning btn-block" name="close" style="margin: 5px 0;"
                        @@click="ui.show = !ui.show">Close</button>
                     <button class="btn btn-danger btn-block" name="close" style="margin: 5px 0;"
                        @@click="adjustment = {}">Reset</button>
                </div>
            </form>
            
            <pre>{{ this.$data }}</pre>
        </div>
        <div v-if="!ui.show">
            <button class="btn btn-primary btn-block"
                @@click="showAdjustmentPopupClick">
                <small>Add Adjustment</small>
            </button>
        </div>
    </div>
</script>

<script type="text/javascript">
    Vue.use(VeeValidate);
    
    var store = new Vuex.Store({
        state: {
            accrual: {
                name: "Accrual Calculator Demo",
                accrualRate: 7,
                hourlyRate: 55,
                minHours: 40,
                maxHours: 255,
                ending: "PLUSONE",
                dayOfPayA: 7,
                dayOfPayB: 21,
                accrualFrequency: "SEMIMONTHLY",
                startingDate: "2018-10-07",
                lastModified: "2018-11-07T07:00:00.000Z",
                actions: [
                    {
                        accrualActionId: "9946e32a-00ac-4a3e-95d6-7a0999ee9118",
                        accrualAction: "CREATED",
                        actionDate: new Date(2018, 10, 31),
                        amount: null,
                        note: null,
                        dateCreated: new Date(2018, 10, 7)
                    },
                    {
                        accrualActionId: "91c66ded-bb04-47a4-97aa-1312d2b4c3ff",
                        accrualAction: "ADJUSTMENT",
                        actionDate: new Date(2018, 10, 7),
                        amount: -8,
                        note: "this is my day off",
                        dateCreated: new Date(2018, 10, 7)
                    }],
                rows: [{"rowId":0,"currentAccrual":22,"accrualDate":null,"hoursUsed":0,"actions":[]},{"rowId":1,"currentAccrual":29,"accrualDate":"2018-10-07","hoursUsed":0,"actions":[]},{"rowId":2,"currentAccrual":36,"accrualDate":"2018-10-21","hoursUsed":0,"actions":[]},{"rowId":3,"currentAccrual":43,"accrualDate":"2018-11-07","hoursUsed":0,"actions":[{accrualActionId: "91c66ded-bb04-47a4-97aa-1312d2b4c3ff",accrualAction: "ADJUSTED",actionDate: "2018-10-31",amount: -8,note: "I sure love Halloween",dateCreated: new Date(2018, 10, 12)}]},{"rowId":4,"currentAccrual":50,"accrualDate":"2018-11-21","hoursUsed":0,"actions":[]},{"rowId":5,"currentAccrual":57,"accrualDate":"2018-12-07","hoursUsed":0,"actions":[]},{"rowId":6,"currentAccrual":64,"accrualDate":"2018-12-21","hoursUsed":0,"actions":[]},{"rowId":7,"currentAccrual":71,"accrualDate":"2019-01-07","hoursUsed":0,"actions":[]},{"rowId":8,"currentAccrual":78,"accrualDate":"2019-01-21","hoursUsed":0,"actions":[]},{"rowId":9,"currentAccrual":85,"accrualDate":"2019-02-07","hoursUsed":0,"actions":[]},{"rowId":10,"currentAccrual":92,"accrualDate":"2019-02-21","hoursUsed":0,"actions":[]},{"rowId":11,"currentAccrual":99,"accrualDate":"2019-03-07","hoursUsed":0,"actions":[]},{"rowId":12,"currentAccrual":106,"accrualDate":"2019-03-21","hoursUsed":0,"actions":[]},{"rowId":13,"currentAccrual":113,"accrualDate":"2019-04-07","hoursUsed":0,"actions":[]},{"rowId":14,"currentAccrual":120,"accrualDate":"2019-04-21","hoursUsed":0,"actions":[]},{"rowId":15,"currentAccrual":127,"accrualDate":"2019-05-07","hoursUsed":0,"actions":[]},{"rowId":16,"currentAccrual":134,"accrualDate":"2019-05-21","hoursUsed":0,"actions":[]},{"rowId":17,"currentAccrual":141,"accrualDate":"2019-06-07","hoursUsed":0,"actions":[]},{"rowId":18,"currentAccrual":148,"accrualDate":"2019-06-21","hoursUsed":0,"actions":[]},{"rowId":19,"currentAccrual":155,"accrualDate":"2019-07-07","hoursUsed":0,"actions":[]},{"rowId":20,"currentAccrual":162,"accrualDate":"2019-07-21","hoursUsed":0,"actions":[]},{"rowId":21,"currentAccrual":169,"accrualDate":"2019-08-07","hoursUsed":0,"actions":[]},{"rowId":22,"currentAccrual":176,"accrualDate":"2019-08-21","hoursUsed":0,"actions":[]},{"rowId":23,"currentAccrual":183,"accrualDate":"2019-09-07","hoursUsed":0,"actions":[]},{"rowId":24,"currentAccrual":190,"accrualDate":"2019-09-21","hoursUsed":0,"actions":[]},{"rowId":25,"currentAccrual":197,"accrualDate":"2019-10-07","hoursUsed":0,"actions":[]},{"rowId":26,"currentAccrual":204,"accrualDate":"2019-10-21","hoursUsed":0,"actions":[]},{"rowId":27,"currentAccrual":211,"accrualDate":"2019-11-07","hoursUsed":0,"actions":[]},{"rowId":28,"currentAccrual":218,"accrualDate":"2019-11-21","hoursUsed":0,"actions":[]},{"rowId":29,"currentAccrual":225,"accrualDate":"2019-12-07","hoursUsed":0,"actions":[]},{"rowId":30,"currentAccrual":232,"accrualDate":"2019-12-21","hoursUsed":0,"actions":[]}]
            }
        },
        mutations: {
            updateAccrual: function (state, accrual) {
                Vue.set(state.accrual, 'name', accrual.name);
                Vue.set(state.accrual, 'minHours', accrual.minHours);
                Vue.set(state.accrual, 'maxHours', accrual.maxHours);
                Vue.set(state.accrual, 'startingDate', accrual.startingDate);
                Vue.set(state.accrual, 'isHeart', accrual.isHeart);
                Vue.set(state.accrual, 'isArchived', accrual.isArchived);
                Vue.set(state.accrual, 'startingDate', accrual.startingDate);
                Vue.set(state.accrual, 'ending', accrual.ending);
                Vue.set(state.accrual, 'accrualFrequency', accrual.accrualFrequency);
                Vue.set(state.accrual, 'hourlyRate', parseInt(accrual.hourlyRate));
                Vue.set(state.accrual, 'dayOfPayA', parseInt(accrual.dayOfPayA));
                Vue.set(state.accrual, 'dayOfPayB', parseInt(accrual.dayOfPayB));
                Vue.set(state.accrual, 'lastModified', new Date().toISOString());
            },
            addAccrualAction: function(state, action) {
                function guid() {
                    function s4() {
                        return Math.floor((1 + Math.random()) * 0x10000)
                            .toString(16)
                            .substring(1);
                    }
                    return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
                }

                action.accrualActionId = guid();
                action.dateCreated = new Date().toISOString();
                
                var actions = state.accrual.actions.slice();
                actions.push(action);

                var rows = state.accrual.rows ? state.accrual.rows.slice(): [];

                var found = false;
             
                rows.forEach(function(row) {
                    var date1 = new Date(row.accrualDate);
                    var date2 = new Date(action.actionDate);
                    if (!found && date2 <= date1) {
                        if (!row.actions) {
                            row.actions = [];
                        }
                        row.actions.push(action);
                        found = true;
                    }
                });
                
                Vue.set(state.accrual, 'actions', actions);
                Vue.set(state.accrual, 'rows', rows);
            },
            deleteAccrualAction: function(state, accrualActionId) {
                var actions = state.accrual.actions.slice();
                for (var i = actions.length - 1; i >= 0; i--) {
                    var action = actions[i];
                    if (action.accrualActionId === accrualActionId) {
                        actions.splice(i, 1);
                    }
                }

                var rows = state.accrual.rows.slice();
                for (var i = 0; i < rows.length; i++) {
                    var row = rows[i];
                    
                    for (var j = row.actions ? row.actions.length - 1 : 0; j >= 0; j--) {
                        var action = row.actions[j];
                        if (action.accrualActionId === accrualActionId) {
                            row.actions.splice(j, 1);
                            break;
                        }
                    }
                }

                Vue.set(state.accrual, 'actions', actions);
                Vue.set(state.accrual, 'rows', rows);
            }
        }
    });

    var app = new Vue({
        el: '#app',
        store,
        components: {
            App
        },
        render: function(createElement) {
            return createElement(App);
        }
    });
</script>